/*
 * This build file was generated by the Gradle 'init' task.
 *
 * This generated file contains a commented-out sample Java project to get you started.
 * For more details take a look at the Java Quickstart chapter in the Gradle
 * user guide available at https://docs.gradle.org/4.4/userguide/tutorial_java_projects.html
 */
buildscript {
    ext {
        kotlinVersion = '1.2.21'
        dokkaVersion = '0.9.16'
    }

    repositories {
        mavenLocal()
        jcenter()
        maven({
            url 'http://www.yaoshining.com:8083/repository/maven-public/'
        })
        maven { url "http://repo.spring.io/plugins-release" }
    }
    dependencies {
        classpath("org.springframework.boot:spring-boot-gradle-plugin:2.0.2.RELEASE")
        classpath 'io.spring.gradle:propdeps-plugin:0.0.9.RELEASE'
        classpath "org.jetbrains.kotlin:kotlin-gradle-plugin:$kotlinVersion"
        classpath "org.jetbrains.kotlin:kotlin-allopen:$kotlinVersion"
        classpath "org.jetbrains.dokka:dokka-gradle-plugin:${dokkaVersion}"
    }
}

// Apply the java plugin to add support for Java
apply plugin: 'java'
sourceCompatibility=1.8
targetCompatibility=1.8
apply plugin: 'org.springframework.boot'
apply plugin: 'io.spring.dependency-management'
apply plugin: 'kotlin'
apply plugin: 'kotlin-spring'
apply plugin: 'org.jetbrains.dokka'

defaultTasks 'bootRun'

group = 'com.yao.blog'
version = '0.0.1-SNAPSHOT'
description = ''

springBoot {
    mainClassName = 'com.yao.blog.BlogAppKt'
    buildInfo()
}

bootJar {
    classifier = 'boot'
    baseName = 'blog-yao'
    version =  '0.0.1-SNAPSHOT'
}

bootRun {
    jvmArgs = ["-Dorg.gradle.debug=true"]
}

sourceSets {
  main {
    java {
      srcDirs = ["${project.projectDir}/src/main/java"]
    }
    kotlin {
      srcDirs = ["${project.projectDir}/src/main/java", "${project.projectDir}/src/main/kotlin"]
    }
    resources {
      srcDirs "${project.projectDir}/src/main/resources"
    }
  }
}

// In this section you declare where to find the dependencies of your project
repositories {
    // Use 'jcenter' for resolving your dependencies.
    // You can declare any Maven/Ivy/file repository here.
    mavenLocal()
    maven({
        url 'http://www.yaoshining.com:8083/repository/maven-public/'
    })
    mavenCentral()
}

configurations.all {
	resolutionStrategy.eachDependency { DependencyResolveDetails details ->
		if (details.requested.group == 'org.springframework') {
			details.useVersion '5.0.7.RELEASE'
		}
		if (details.requested.group == 'org.springframework.boot') {
			details.useVersion '2.0.2.RELEASE'
		}
	}
}

// In this section you declare the dependencies for your production and test code
dependencies {
    // The production code uses the SLF4J logging API at compile time
    compile 'org.slf4j:slf4j-api:1.7.25'
    compile("org.springframework.boot:spring-boot-starter-web")
    compile "org.springframework.boot:spring-boot-starter-actuator"
    compile("org.springframework.boot:spring-boot-starter-data-mongodb")
    compile "org.springframework.boot:spring-boot-starter-logging"
    compile "org.springframework.boot:spring-boot-starter-security"
    compile "org.springframework.boot:spring-boot-autoconfigure"
    compile("org.jetbrains.kotlin:kotlin-stdlib-jdk8:${kotlinVersion}")
    compile("org.jetbrains.kotlin:kotlin-reflect:${kotlinVersion}")
    compile "org.apache.commons:commons-lang3"
    compile "com.github.mongobee:mongobee:0.13"
    compile group: 'org.zalando', name: 'problem-spring-web', version: '0.23.0'
    compileOnly "org.springframework.boot:spring-boot-configuration-processor"
    // Declare the dependency for your favourite test framework you want to use in your tests.
    // TestNG is also supported by the Gradle Test task. Just change the
    // testCompile dependency to testCompile 'org.testng:testng:6.8.1' and add
    // 'test.useTestNG()' to your build script.
    testCompile 'junit:junit:4.12'
    testCompile('org.springframework.boot:spring-boot-starter-test')
}

dokka {
  outputFormat = 'html'
  outputDirectory = "$buildDir/javadoc"
}
