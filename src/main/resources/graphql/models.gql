# scalar Date

schema {
    query: Query
}

enum ArticleStatus {
    OFFLINE,
    ONLINE,
    TRASHED
}

input Pageable {
    page: Int!,
    size: Int!,
    sort: [[String]]
}

type PageResult {
    content: [PageableType!],
    totalPages: Int,
    totalElements: Int,
    size: Int,
    numberOfElements: Int,
    first: Boolean,
    last: Boolean
}

union PageableType = Article | User

type Query {
    users: [User]
    user(login: String): User
    articles(status: ArticleStatus, pageable: Pageable): PageResult,
    article(id: String): Article
}

type User {
    id: ID!
    login: String!
    firstName: String
    lastName: String
    email: String
    activated: Boolean
    langKey: String
    imageUrl: String
    createdBy: String
    createdDate: String
    lastModifiedBy: String
    lastModifiedDate: String
    authorities: [String]
}

type Article {
    id: ID!
    title: String!,
    content: String,
    publishDate: String,
    status: ArticleStatus,
    prev: Article,
    next: Article,
    author: User
}
